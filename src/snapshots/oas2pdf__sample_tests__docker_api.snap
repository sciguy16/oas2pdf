---
source: src/sample_tests.rs
expression: "run_sample_test(\"samples/docker.yaml\")"
---
#let title = [ Docker Remote API ]

#set heading(numbering: "1.")
#set page(
  header: align(
    right + horizon,
    title
  ),
  numbering: "1/1"
)

#align(horizon)[
	#align(center, text(27pt)[
	  *#title*
	])
	#align(center, text(24pt)[ The API for each docker installation. ])
]

#pagebreak()

#outline(
	depth: 2,
	indent: auto,
)


#pagebreak()
= Container

== /containers/create

=== post - createContainer
Create a container

Create a container

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[false],
	[Assign the specified name to the container. Must match /?[a-zA-Z0-9\_-]+.],
	[],

	[Content-Type],
	[true],
	[Content Type of input],
	[],

)


== /containers/json

=== get - findAllContainers
List containers

List containers

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[all],
	[false],
	[Show all containers. Only running containers are shown by default (i.e., this defaults to false)],
	[],

	[limit],
	[false],
	[Show  last created containers, include non-running ones.],
	[],

	[since],
	[false],
	[Show only containers created since Id, include non-running ones.],
	[],

	[before],
	[false],
	[Show only containers created before Id, include non-running ones.],
	[],

	[size],
	[false],
	[1/True/true or 0/False/false, Show the containers sizes.],
	[],

	[filters],
	[false],
	[A JSON encoded value of the filters (a map[string][]string) to process on the containers list],
	[],

)


== /containers/{id}

=== delete - removeContainer
Remove a container

Remove the container id from the filesystem

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[v],
	[false],
	[1/True/true or 0/False/false, Remove the volumes associated to the container. Default false.],
	[],

	[force],
	[false],
	[1/True/true or 0/False/false, Kill then remove the container. Default false.],
	[],

)


== /containers/{id}/archive

=== get - getArchive
Get an archive of a filesystem resource in a container

Get an tar archive of a resource in the filesystem of container id.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[path],
	[true],
	[Resource in the container’s filesystem to archive.],
	[],

)


== /containers/{id}/attach

=== post - attach
Attach to a container

Attach to the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[logs],
	[false],
	[1/True/true or 0/False/false, return logs. Default false],
	[],

	[stream],
	[false],
	[1/True/true or 0/False/false, return stream. Default false],
	[],

	[stdin],
	[false],
	[1/True/true or 0/False/false, if stream=true, attach to stdin. Default false.],
	[],

	[stdout],
	[false],
	[1/True/true or 0/False/false, if logs=true, return stdout log, if stream=true, attach to stdout. Default false.],
	[],

	[stderr],
	[false],
	[1/True/true or 0/False/false, if logs=true, return stderr log, if stream=true, attach to stderr. Default false.],
	[],

)


== /containers/{id}/attach/ws

=== get - attachWebsocket
Attach to a container (websocket)

Attach to the container id with a websocket.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[logs],
	[false],
	[1/True/true or 0/False/false, return logs. Default false],
	[],

	[stream],
	[false],
	[1/True/true or 0/False/false, return stream. Default false],
	[],

	[stdin],
	[false],
	[1/True/true or 0/False/false, if stream=true, attach to stdin. Default false.],
	[],

	[stdout],
	[false],
	[1/True/true or 0/False/false, if logs=true, return stdout log, if stream=true, attach to stdout. Default false.],
	[],

	[stderr],
	[false],
	[1/True/true or 0/False/false, if logs=true, return stderr log, if stream=true, attach to stderr. Default false.],
	[],

)


== /containers/{id}/changes

=== get - changes
Inspect changes on a container’s filesystem

Inspect changes on a container’s filesystem

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[kind],
	[false],
	[Kind of changes],
	[],

)


== /containers/{id}/export

=== get - export
Export a container

Export the contents of container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

)


== /containers/{id}/json

=== get - findContainer
Inspect a container

Return low-level information on the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

)


== /containers/{id}/kill

=== post - kill
Kill a container

Send a posix signal to a container

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[signal],
	[false],
	[Signal to send to the container, integer or string like SIGINT, defaults to SIGKILL],
	[],

)


== /containers/{id}/logs

=== get - logs
Get container logs

Get stdout and stderr logs from the container id. Note: This endpoint works only for containers with json-file logging driver.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[follow],
	[false],
	[1/True/true or 0/False/false, return stream. Default false.],
	[],

	[stdout],
	[false],
	[1/True/true or 0/False/false, show stdout log. Default false.],
	[],

	[stderr],
	[false],
	[1/True/true or 0/False/false, show stderr log. Default false.],
	[],

	[since],
	[false],
	[UNIX timestamp (integer) to filter logs. Specifying a timestamp will only output log-entries since that timestamp. Default: 0 (unfiltered)],
	[],

	[timestamps],
	[false],
	[1/True/true or 0/False/false, print timestamps for every log line. ],
	[],

	[tail],
	[false],
	[Output specified number of lines at the end of logs: all or . Default all.],
	[],

)


== /containers/{id}/pause

=== post - pause
Pause a container

Pause the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

)


== /containers/{id}/rename

=== post - rename
Rename a container

Rename the container id to a new\_name

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[name],
	[true],
	[New name for the container],
	[],

)


== /containers/{id}/resize

=== post - resizeContainer
Resize a container TTY

Resize the TTY for container with id. The unit is number of characters. You must restart the container for the resize to take effect.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[h],
	[false],
	[Height of the tty session],
	[],

	[w],
	[false],
	[Width of the tty session],
	[],

)


== /containers/{id}/restart

=== post - restart
Restart a container

Restart the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[t],
	[false],
	[number of seconds to wait before killing the container],
	[],

)


== /containers/{id}/start

=== post - startContainer
Start a container

Start the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

)


== /containers/{id}/stats

=== get - stats
Get container stats based on resource usage

This endpoint returns a live stream of a container’s resource usage statistics.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[stream],
	[false],
	[Stream stats],
	[],

)


== /containers/{id}/stop

=== post - stop
Stop a container

Stop the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[t],
	[false],
	[number of seconds to wait before killing the container],
	[],

)


== /containers/{id}/top

=== get - listProcesses
List processes running inside a container

List processes running inside the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

	[ps\_args],
	[false],
	[ps arguments to use (e.g., aux)],
	[],

)


== /containers/{id}/unpause

=== post - unpause
Unpause a container

Unpause the container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

)


== /containers/{id}/wait

=== post - wait
Wait a container

Block until container id stops, then returns the exit code

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[The container id or name],
	[],

)



#pagebreak()
= Exec

== /containers/{id}/exec

=== post - createExec
Exec Create

Sets up an exec instance in a running container id

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[Content-Type],
	[true],
	[Content Type Header],
	[],

	[id],
	[true],
	[Container name or id],
	[],

)


== /exec/{id}/json

=== post - findExec
Exec Inspect

Return low-level information about the exec command id.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[Exec instance id],
	[],

)


== /exec/{id}/resize

=== post - resizeTty
Exec Resize

Resize the tty session used by the exec command id.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[Exec instance id],
	[],

	[h],
	[false],
	[Height of the tty session],
	[],

	[w],
	[false],
	[Width of the tty session],
	[],

)


== /exec/{id}/start

=== post - startExec
Exec Start

Starts a previously set up exec instance id. If detach is true, this API returns after starting the exec command. Otherwise, this API sets up an interactive session with the exec command.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[Content-Type],
	[true],
	[Content Type Header],
	[],

	[id],
	[true],
	[Exec instance id],
	[],

)



#pagebreak()
= Image

== /build

=== post - build
Build an image from Dockerfile via stdin

Build an image from Dockerfile via stdin

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[dockerfile],
	[false],
	[Path within the build context to the Dockerfile. This is ignored if remote is specified and points to an individual filename.],
	[],

	[t],
	[false],
	[A repository name (and optionally a tag) to apply to the resulting image in case of success.],
	[],

	[remote],
	[false],
	[A Git repository URI or HTTP/HTTPS URI build source. If the URI specifies a filename, the file’s contents are placed into a file called Dockerfile.],
	[],

	[q],
	[false],
	[Suppress verbose build output.],
	[],

	[nocache],
	[false],
	[Do not use the cache when building the image.],
	[],

	[pull],
	[false],
	[Attempt to pull the image even if an older image exists locally],
	[],

	[rm],
	[false],
	[Remove intermediate containers after a successful build (default behavior).],
	[],

	[forcerm],
	[false],
	[always remove intermediate containers (includes rm)],
	[],

	[memory],
	[false],
	[Set memory limit for build.],
	[],

	[memswap],
	[false],
	[Total memory (memory + swap), -1 to disable swap.],
	[],

	[cpushares],
	[false],
	[CPU shares (relative weight).],
	[],

	[cpusetcpus],
	[false],
	[CPUs in which to allow execution (e.g., 0-3, 0,1).],
	[],

	[cpuperiod],
	[false],
	[The length of a CPU period in microseconds.],
	[],

	[cpuquota],
	[false],
	[Microseconds of CPU time that the container can get in a CPU period.],
	[],

	[buildargs],
	[false],
	[Total memory (memory + swap), -1 to disable swap.],
	[],

	[Content-type],
	[false],
	[ Set to 'application/tar'.],
	[],

	[X-Registry-Config],
	[false],
	[A base64-url-safe-encoded Registry Auth Config JSON object],
	[],

)


== /commit

=== post - commit
Create a new image from a container’s changes

Create a new image from a container’s changes

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[container],
	[false],
	[Container id or name to commit],
	[],

	[repo],
	[false],
	[Repository name for the created image],
	[],

	[tag],
	[false],
	[Tag name for the create image],
	[],

	[comment],
	[false],
	[Commit message],
	[],

	[author],
	[false],
	[author (e.g., “John Hannibal Smith “)],
	[],

	[pause],
	[false],
	[1/True/true or 0/False/false, whether to pause the container before committing],
	[],

	[changes],
	[false],
	[Dockerfile instructions to apply while committing],
	[],

)


== /images/create

=== post - createImage
Create an image

Create an image either by pulling it from the registry or by importing it

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[fromImage],
	[false],
	[Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image.],
	[],

	[fromSrc],
	[false],
	[Source to import. The value may be a URL from which the image can be retrieved or - to read the image from the request body. This parameter may only be used when importing an image.],
	[],

	[repo],
	[false],
	[Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.],
	[],

	[tag],
	[false],
	[Tag or digest.],
	[],

	[X-Registry-Config],
	[false],
	[A base64-encoded AuthConfig object],
	[],

)


== /images/get

=== get - saveAll
Get a tarball containing all images.

Get a tarball containing all images and metadata for one or more repositories.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[names],
	[false],
	[Image names to filter],
	[],

)


== /images/json

=== get - findAllImages
List Images

List Images

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[all],
	[false],
	[Show all images. Only images from a final layer (no children) are shown by default.],
	[],

	[filters],
	[false],
	[A JSON encoded value of the filters (a map[string][]string) to process on the containers list],
	[],

	[filter],
	[false],
	[Only return images with the specified name.],
	[],

	[digests],
	[false],
	[Show digest information, default to false],
	[],

)


== /images/load

=== post - load
Load a tarball with a set of images and tags into docker.

Load a set of images and tags into a Docker repository. See the image tarball format for more details.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)


== /images/search

=== get - search
Search images

Search for an image on Docker Hub.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[term],
	[false],
	[Term to search],
	[],

)


== /images/{name}

=== delete - removeImage
Remove an image

Remove the image name from the filesystem

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Image name or id],
	[],

	[force],
	[false],
	[1/True/true or 0/False/false, default false],
	[],

	[noprune],
	[false],
	[1/True/true or 0/False/false, default false.],
	[],

)


== /images/{name}/get

=== get - save
Get a tarball containing all images in a repository

Get a tarball containing all images and metadata for the repository specified by name.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Image name or id],
	[],

)


== /images/{name}/history

=== get - history
Get the history of an image

Return the history of the image name

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Image name or id],
	[],

)


== /images/{name}/json

=== get - findImage
Inspect an image

Return low-level information on the image name

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Image name or id],
	[],

)


== /images/{name}/push

=== post - push
Push an image to the registry

Push the image name on the registry

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Image name or id],
	[],

	[tag],
	[false],
	[The tag to associate with the image on the registry.],
	[],

	[X-Registry-Auth],
	[true],
	[A base64-encoded AuthConfig object],
	[],

)


== /images/{name}/tag

=== post - tag
Tag an image into a repository

Tag the image name into a repository

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Image name or id],
	[],

	[repo],
	[false],
	[The repository to tag in.],
	[],

	[force],
	[false],
	[1/True/true or 0/False/false, default false],
	[],

	[tag],
	[false],
	[The new tag name.],
	[],

)



#pagebreak()
= Misc

== /\_ping

=== get - ping
Ping the docker server

Ping the docker server

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)


== /auth

=== post - checkAuthentication
Check auth configuration

Check auth configuration.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)


== /events

=== get - getEvents
Monitor Docker’s events

Get container events from docker, either in real time via streaming, or via polling (using since).

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[since],
	[false],
	[Timestamp used for polling],
	[],

	[until],
	[false],
	[Timestamp used for polling],
	[],

	[filters],
	[false],
	[A json encoded value of the filters (a map[string][]string) to process on the event list.],
	[],

)


== /info

=== get - getSystemInformation
Display system-wide information

Display system-wide information.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)


== /version

=== get - getVersion
Show the docker version information

Show the docker version information

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)



#pagebreak()
= Network

== /networks

=== get - findAllNetworks
List networks

List networks.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[filters],
	[false],
	[JSON encoded value of the filters (a map[string][]string) to process on the networks list.],
	[],

)


== /networks/create

=== post - createNetwork
Create network

Create network.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)


== /networks/{id}

=== delete - removeNetwork
Remove a network

Remove a network

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[Network id or name],
	[],

)

=== get - findNetwork
Inspect network

Inspect network.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[Network id or name],
	[],

)


== /networks/{id}/connect

=== post - connect
Connect a container to a network

Connect a container to a network.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[Network id or name],
	[],

)


== /networks/{id}/disconnect

=== post - disconnect
Disconnect a container to a network

Disconnect a container to a network.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[id],
	[true],
	[Network id or name],
	[],

)



#pagebreak()
= Volume

== /volumes

=== get - findAllVolumes
List volumes

List volumes.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[filters],
	[false],
	[JSON encoded value of the filters (a map[string][]string) to process on the volumes list],
	[],

)


== /volumes/create

=== post - createVolume
Create a volume

Create a volume.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

)


== /volumes/{name}

=== delete - removeVolume
Remove a volume

Instruct the driver to remove the volume.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Volume name or id],
	[],

)

=== get - findVolume
Inspect a volume

Inspect a volume.

==== Parameters
#table(
	columns: 4,
	[Name], [Required], [Description], [Schema],

	[name],
	[true],
	[Volume name or id],
	[],

)
